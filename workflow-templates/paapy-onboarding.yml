name: PaaPy Onboarding Workflow

on: workflow_dispatch

permissions: read-all

# Update these values with your configuration, merge, and run this workflow to onboard your service to PaaPy. #####
env:
  default-permissions: # Optional. A comma-separated string with any of: 'sns, sqs, rds, eventbridge'.
  service-name: # Required. Your service name. MUST MATCH REPOSITORY NAME!
  service-type: # Required. Service type of either: 'ecs' or 'lambda'.
  team-name: # Required. Your team name.
  custom-policy-names: # Optional. A comma-separated string of custom IAM policy names.
  vault-users: # Required. A comma-separated string of user emails to add to the 1Password vault
###################################################################################################################

jobs:
  onepass:
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: write
    steps:
      - name: PaaPy 1Password Onboarding
        id: onepass
        uses: humalytix/PaaPy-Onboarding-1Password@v1
        with:
          users: ${{ env.vault-users }}
          service: ${{ env.service-name }}
          op_secret_key: ${{ secrets.PAAPY_OP_ONBOARDING_SECRET_KEY }}
          op_email: ${{ secrets.PAAPY_OP_ONBOARDING_EMAIL }}
          op_password: ${{ secrets.PAAPY_OP_ONBOARDING_PASSWORD }}
          op_session_name: ${{ secrets.PAAPY_OP_ONBOARDING_SESSION_NAME }}
          gh_app_id: ${{ vars.PAAPY_APP_ID }}
          gh_access_key: ${{ secrets.PAAPY_PRIVATE_KEY }}

      - name: Test Token Retrieval
        run: |
          if [ -n "${{ steps.onepass.outputs.token }}" ]; then
            echo "Token received successfully (masked)"
          else
            echo "ERROR: No token received from onboarding step"
            exit 1
          fi

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Get a GitHub app token that has secrets:write permission
      - name: Get PaaPy Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.PAAPY_APP_ID }}
          private-key: ${{ secrets.PAAPY_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      # Set the secret in the repository
      - name: Store Token
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: gh secret set OP_SERVICE_ACCOUNT_TOKEN --body "${{ steps.onepass.outputs.token }}"

  onboard-nonprod:
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    outputs:
      role_arn: ${{ steps.onboarding.outputs.role_arn }}
      state_bucket: ${{ steps.onboarding.outputs.state_bucket }}
      secret_arn: ${{ steps.onboarding.outputs.secret_arn }}
    steps:
      - name: Get PaaPy Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.PAAPY_APP_ID }}
          private-key: ${{ secrets.PAAPY_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: PaaPy Onboarding
        uses: humalytix/PaaPy-onboarding@v1
        id: onboarding
        with:
          env: nonprod
          app-token: ${{ steps.app-token.outputs.token }}
          custom-policy-names: ${{ env.custom-policy-names }}
          default-permissions: ${{ env.default-permissions }}
          service-name: ${{ env.service-name }}
          service-type: ${{ env.service-type }}
          team-name: ${{ env.team-name }}

  onboard-prod:
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    outputs:
      role_arn: ${{ steps.onboarding.outputs.role_arn }}
      state_bucket: ${{ steps.onboarding.outputs.state_bucket }}
      secret_arn: ${{ steps.onboarding.outputs.secret_arn }}
    steps:
      - name: Get PaaPy Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.PAAPY_APP_ID }}
          private-key: ${{ secrets.PAAPY_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: PaaPy Onboarding
        uses: humalytix/PaaPy-onboarding@v1
        id: onboarding
        with:
          env: prod
          app-token: ${{ steps.app-token.outputs.token }}
          custom-policy-names: ${{ env.custom-policy-names }}
          default-permissions: ${{ env.default-permissions }}
          service-name: ${{ env.service-name }}
          service-type: ${{ env.service-type }}
          team-name: ${{ env.team-name }}

  set-repo-vars:
    runs-on: ubuntu-24.04
    needs: [onboard-nonprod, onboard-prod]
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PaaPy Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.PAAPY_APP_ID }}
          private-key: ${{ secrets.PAAPY_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Set repository variables
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh variable set NONPROD_ROLE_ARN --body "${{ needs.onboard-nonprod.outputs.role_arn }}"
          gh variable set NONPROD_STATE_BUCKET --body "${{ needs.onboard-nonprod.outputs.state_bucket }}"
          gh variable set NONPROD_SECRET_ARN --body "${{ needs.onboard-nonprod.outputs.secret_arn }}"
          gh variable set PROD_ROLE_ARN --body "${{ needs.onboard-prod.outputs.role_arn }}"
          gh variable set PROD_STATE_BUCKET --body "${{ needs.onboard-prod.outputs.state_bucket }}"
          gh variable set PROD_SECRET_ARN --body "${{ needs.onboard-prod.outputs.secret_arn }}"
